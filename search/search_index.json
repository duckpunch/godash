{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data structures and utilities to represent the game of Go . This library depends on Immutable.js and lodash . Getting Started \u00b6 Install godash via npm . npm install godash require and use it in your modules. var godash = require ( 'godash' ); var board = new godash . Board ( 19 ); var tengen = new godash . Coordinate ( 9 , 9 ); // 0-based board . moves . has ( tengen ); // false var standardOpening = placeStone ( board , tengen , godash . BLACK ); standardOpening . moves . has ( tengen ); // true Why Godash? \u00b6 Godash provides the \"primitives\" for Go necessary for creating UIs that go beyond a simple SGF player. You can create whatever UI you want without having to reinvent the wheel every time. Check out the documentation to see what Godash provides. Roadmap \u00b6 Godash doesn't currently do very much parameter checking. It'd probably be nice to add that. There also isn't much support for writing SGFs. This, too, might be added in the future. Further, reading SGFs is a bit brittle at the moment since the full SGF spec is not implemented. Related Projects \u00b6 Elixir port - port to Elixir by kokolegorille pizza - an anonymous go server ( source ) react-go-board - a simple go board component for React Way to Go - a rewrite of Hiroki Mori's Interactive Way to Go","title":"Home"},{"location":"#getting-started","text":"Install godash via npm . npm install godash require and use it in your modules. var godash = require ( 'godash' ); var board = new godash . Board ( 19 ); var tengen = new godash . Coordinate ( 9 , 9 ); // 0-based board . moves . has ( tengen ); // false var standardOpening = placeStone ( board , tengen , godash . BLACK ); standardOpening . moves . has ( tengen ); // true","title":"Getting Started"},{"location":"#why-godash","text":"Godash provides the \"primitives\" for Go necessary for creating UIs that go beyond a simple SGF player. You can create whatever UI you want without having to reinvent the wheel every time. Check out the documentation to see what Godash provides.","title":"Why Godash?"},{"location":"#roadmap","text":"Godash doesn't currently do very much parameter checking. It'd probably be nice to add that. There also isn't much support for writing SGFs. This, too, might be added in the future. Further, reading SGFs is a bit brittle at the moment since the full SGF spec is not implemented.","title":"Roadmap"},{"location":"#related-projects","text":"Elixir port - port to Elixir by kokolegorille pizza - an anonymous go server ( source ) react-go-board - a simple go board component for React Way to Go - a rewrite of Hiroki Mori's Interactive Way to Go","title":"Related Projects"},{"location":"api/","text":"API Documentation \u00b6 Classes \u00b6 Board \u00b6 new godash . Board ( dimensions = 19 , ... moves ) Representation of a board position. Extends Immutable.Record . Constructor Arguments dimensions (number) - Size of the board, defaulted to 19. ...moves (Coordinate, string) - Moves to be placed on the board. There should be an even number of arguments in pairs - Coordinate and color constant. Properties dimensions (number) - Size of the board. moves (Immutable.Map) - Stones present on this board. Coordinate keys with either BLACK or WHITE values. Examples var board = new Board (); board . toString (); // => Board { \"dimensions\": 19, \"moves\": Map {} } var smallBoard = new Board ( 5 , new Coordinate ( 2 , 2 ), BLACK ); smallBoard . toString (); // => Board { \"dimensions\": 5, \"moves\": Map { {\"x\":2,\"y\":2}: \"black\" } } Coordinate \u00b6 new godash . Coordinate ( x , y ) A zero-based tuple representing a single location on a Go board. Extends Immutable.Record . Constructor Arguments x (number) - Location on the X-axis. y (number) - Location on the Y-axis. Properties x (number) - Location on the X-axis. y (number) - Location on the Y-axis. Examples var tengen = new Coordinate ( 9 , 9 ); tengen . toString (); // => Coordinate { \"x\": 9, \"y\": 9 } tengen . x ; // => 9 Constants \u00b6 BLACK \u00b6 godash . BLACK The color black. EMPTY \u00b6 godash . EMPTY An empty space. TENGEN_13 \u00b6 godash . TENGEN_13 Center point on a 13x13 board. TENGEN_19 \u00b6 godash . TENGEN_19 Center point on a 19x19 board. TENGEN_9 \u00b6 godash . TENGEN_9 Center point on a 9x9 board. WHITE \u00b6 godash . WHITE The color white. Board utilities \u00b6 addMove \u00b6 godash . addMove ( board , coordinates , color ) Function to add a move onto a board while respecting the rules. Since no sequence information is available, this function does not respect ko . Use followupKo if you want to do ko -related things. Arguments board (Board) - Board from which to add the move. coordinates (Coordinate) - Location to add the move. color (string) - Color of the move. Returns Board - New board with the move played. Examples var atari = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( atari ); // => +O+ // OXO // +++ var killed = addMove ( atari , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( killed ); // => +O+ // O+O // +O+ constructBoard \u00b6 godash . constructBoard ( coordinates , board , startColor ) Constructs a board for an array of coordinates. This function iteratively calls addMove while alternating colors. Arguments coordinates (Array) - Ordered Coordinate moves. board (Board) - Optional starting board. Empty 19x19, if omitted. startColor (string) - Optional starting color, defaulted to BLACK . Returns Board - New board constructed from the coordinates. Examples var tigersMouth = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK ); toAsciiBoard ( tigersMouth ); // => +O+ // O+O // +++ var selfAtari = new Coordinate ( 1 , 1 ); var killingMove = new Coordinate ( 2 , 1 ); var ponnuki = constructBoard ( [ selfAtari , killingMove ], tigersMouth , WHITE ); toAsciiBoard ( ponnuki ); // => +O+ // O+O // +O+ difference \u00b6 godash . difference ( board1 , board2 ) Finds the moves on the first board that are not on the second board. Arguments board1 (Board) - First board. board2 (Board) - Board with moves to subtract from first board. Returns Set - Set containing pairs of Coordinate and color remaining in the difference. Examples var atari = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE , ); toAsciiBoard ( atari ); // => +O+ // OXO // +++ var captured = difference ( atari , addMove ( atari , new Coordinate ( 2 , 1 ), BLACK )); captured . toString (); // 'Set { List [ Coordinate { \"x\": 1, \"y\": 1 }, \"white\" ] }' followupKo \u00b6 godash . followupKo ( board , coordinate , color ) Determines move that would be illegal under the ko rule Arguments board (Board) - Starting board. coordinate (Coordinate) - Intended placement of stone. color (string) - Stone color. Returns Coordinate - Position of illegal followup or null if none exists. Examples const koPosition = new Board ( 4 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE , new Coordinate ( 2 , 0 ), WHITE , new Coordinate ( 2 , 2 ), WHITE , new Coordinate ( 3 , 1 ), WHITE , ); toAsciiBoard ( koPosition ); // => +O++ // OXO+ // X+X+ // +X++ const koStart = new Coordinate ( 2 , 1 ); followupKo ( koPosition , koStart , BLACK ). toString (); // => 'Coordinate { \"x\": 1, \"y\": 1 }' group \u00b6 godash . group ( board , coordinate ) Finds the set of coordinates which identifies the fully connected group for the given location. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to inspect. Returns Set - Containing Coordinate for the members of the group. Examples var board = new Board ( 3 , new Coordinate ( 1 , 0 ), WHITE , new Coordinate ( 0 , 2 ), WHITE , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 2 , 2 ), BLACK , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( board ); // => ++X // X+O // +OO group ( board , new Coordinate ( 2 , 1 )). toString (); // => Set { // Coordinate { \"x\": 2, \"y\": 1 }, // Coordinate { \"x\": 2, \"y\": 2 }, // Coordinate { \"x\": 1, \"y\": 2 } // } handicapBoard \u00b6 godash . handicapBoard ( size , handicap ) Creates a new Board with the correct number of handicap stones placed. Only standard board sizes (9, 13, 19) are allowed. Arguments size (number) - Size of board, must be 9, 13, or 19. handicap (number) - Number of handicaps, must be 0-9. Returns Board - New board with handicaps placed. Examples var board = handicapBoard ( 9 , 4 ); toAsciiBoard ( board ); // => +++++++++ // +++++++++ // ++O+++O++ // +++++++++ // +++++++++ // +++++++++ // ++O+++O++ // +++++++++ // +++++++++ isLegalBlackMove \u00b6 godash . isLegalBlackMove ( board , coordinate ) Partial application of isLegalMove , fixing the color to BLACK . Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to check. Returns boolean - Whether the move is legal. Examples isLegalMove \u00b6 godash . isLegalMove ( board , coordinate , color ) Determine whether the coordinate-color combination provided is a legal move for the board. Ko is not considered. Use followupKo if you want to do ko -related things. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to check. color (string) - Color to check - BLACK or WHITE . Returns boolean - Whether the move is legal. Examples var ponnuki = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( ponnuki ); // => +O+ // O+O // +O+ isLegalMove ( ponnuki , new Coordinate ( 1 , 1 ), BLACK ) // => true isLegalMove ( ponnuki , new Coordinate ( 1 , 1 ), WHITE ) // => false isLegalWhiteMove \u00b6 godash . isLegalWhiteMove ( board , coordinate ) Partial application of isLegalMove , fixing the color to WHITE . Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to check. Returns boolean - Whether the move is legal. Examples liberties \u00b6 godash . liberties ( board , coordinate ) Finds the set of all liberties for the given coordinate. If the coordinate is part of a group, the set of liberties are the liberties for that group. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Coordinate to inspect. Returns Set - Containing Coordinate members for the liberties of the passed coordinate. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), BLACK ); var collectedLiberties = liberties ( board , new Coordinate ( 1 , 1 )); Immutable . Set . of ( new Coordinate ( 1 , 0 ), new Coordinate ( 0 , 1 ), new Coordinate ( 1 , 2 ), new Coordinate ( 2 , 1 ) ). equals ( collectedLiberties ); // => true libertyCount \u00b6 godash . libertyCount ( board , coordinate ) Counts the liberties for the given coordinate. If the coordinate is part of a group, liberties for the entire group is counted. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Coordinate to inspect. Returns number - Count of liberties for the coordinate on the board. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), BLACK ); libertyCount ( board , new Coordinate ( 1 , 1 )) === 4 ; // => true oppositeColor \u00b6 godash . oppositeColor ( color ) Toggles the passed color. Arguments color (string) - godash.BLACK or godash.WHITE Returns string - Color opposite of the one provided. Examples oppositeColor ( BLACK ) === WHITE // => true oppositeColor ( WHITE ) === BLACK // => true placeStone \u00b6 godash . placeStone ( board , coordinate , color , force ) Places a stone on the board, ignoring the rules of Go. Arguments board (Board) - Board to add stone. coordinate (Coordinate) - Location to add stone. color (string) - Stone color - BLACK or WHITE . force (boolean) - Optionally allow placement over existing stones. Returns Board - New board with the move placed. Examples var ponnuki = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( ponnuki ); // => +O+ // O+O // +O+ toAsciiBoard ( placeStone ( ponnuki , new Coordinate ( 1 , 1 ), WHITE ) ); // => +O+ // OXO // +O+ placeStones \u00b6 godash . placeStones ( board , coordinates , color , force ) Places a set of stones onto the board, ignoring the rules of Go. Arguments board (Board) - Board to add stones. coordinates (Array) - Stones to place. color (string) - Stone color - BLACK or WHITE . force (boolean) - Optionally allow placement over existing stones. Returns Board - New board with the moves placed. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( board ); // => +++ // +X+ // +++ toAsciiBoard ( placeStones ( board , [ new Coordinate ( 1 , 0 ), new Coordinate ( 0 , 1 ), new Coordinate ( 1 , 2 ), new Coordinate ( 2 , 1 ) ], BLACK ) ); // => +O+ // OXO // +O+ removeStone \u00b6 godash . removeStone ( board , coordinate ) Make a given coordinate empty on the board. Arguments board (Board) - Board from which to remove the stone. coordinate (Coordinate) - Location of the stone. Returns Board - New board with the stone removed. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( board ); // => +++ // +X+ // +++ toAsciiBoard ( removeStone ( board , new Coordinate ( 1 , 1 )) ); // => +++ // +++ // +++ removeStones \u00b6 godash . removeStones ( board , coordinates ) Makes several coordinates empty on the board. Arguments board (Board) - Board from which to remove the stone. coordinates (Coordinate) - Location of the stones. Returns Board - New board with the stones removed. Examples var board = new Board ( 3 , new Coordinate ( 1 , 0 ), WHITE , new Coordinate ( 1 , 1 ), WHITE , new Coordinate ( 1 , 2 ), BLACK ); toAsciiBoard ( board ); // => +++ // XXO // +++ toAsciiBoard ( removeStones ( board , [ new Coordinate ( 1 , 1 ), new Coordinate ( 1 , 2 ) ]) ); // => +++ // X++ // +++ toAsciiBoard \u00b6 godash . toAsciiBoard ( board ) Constructs an ASCII representation of the board. Arguments board (Board) - Board to represent. Returns string - ASCII representation of the board. Examples var board = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( board ); // => +O+ // OXO // +++ SGF utilities \u00b6 coordinateToSgfPoint \u00b6 godash . coordinateToSgfPoint ( coordinate ) Converts a Coordinate to an SGF Point in the form of a Javascript String . Arguments coordinate (Coordinate) - Coordinate to convert. Returns string - 2-character string representing an SGF Point Examples coordinateToSgfPoint ( new Coordinate ( 0 , 0 )) // => \"aa\" sgfPointToCoordinate \u00b6 godash . sgfPointToCoordinate ( sgfPoint ) Converts an SGF Point to a Coordinate . Arguments sgfPoint (string) - 2-character string representing an SGF Point Returns Coordinate - Corresponding Coordinate . Examples sgfPointToCoordinate ( 'hi' ). toString (); // => Coordinate { \"x\": 7, \"y\": 8 } sgfToJS \u00b6 godash . sgfToJS ( sgf ) Converts a raw SGF string into a plain Javascript array. Note that unlike Board , the results of this function is a mutable object. Arguments sgf (string) - Raw SGF string to be parsed. Returns Array - Unpacked SGF in plain Javascript objects. Examples var rawSgf = `( ;FF[4]GM[1]SZ[19];B[aa];W[bb] (;B[cc];W[dd];B[ad];W[bd]) (;B[hh];W[hg]C[what a move!]) (;B[gg];W[gh];B[hh] (;W[hg];B[kk]) (;W[kl]) ) )` ; sgfToJS ( rawSgf ); // => [ // {FF: '4', GM: '1', SZ: '19'}, {B: 'aa'}, {W: 'bb'}, // [ // [{B: 'cc'}, {W: 'dd'}, {B: 'ad'}, {W: 'bd'}], // [{B: 'hh'}, {W: 'hg', C: 'what a move!'}], // [ // {B: 'gg'}, {W: 'gh'}, {B: 'hh'}, // [ // [{W: 'hg'}, {B: 'kk'}], // [{W: 'kl'}] // ] // ] // ] // ];","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API Documentation"},{"location":"api/#classes","text":"","title":"Classes"},{"location":"api/#board","text":"new godash . Board ( dimensions = 19 , ... moves ) Representation of a board position. Extends Immutable.Record . Constructor Arguments dimensions (number) - Size of the board, defaulted to 19. ...moves (Coordinate, string) - Moves to be placed on the board. There should be an even number of arguments in pairs - Coordinate and color constant. Properties dimensions (number) - Size of the board. moves (Immutable.Map) - Stones present on this board. Coordinate keys with either BLACK or WHITE values. Examples var board = new Board (); board . toString (); // => Board { \"dimensions\": 19, \"moves\": Map {} } var smallBoard = new Board ( 5 , new Coordinate ( 2 , 2 ), BLACK ); smallBoard . toString (); // => Board { \"dimensions\": 5, \"moves\": Map { {\"x\":2,\"y\":2}: \"black\" } }","title":"Board"},{"location":"api/#coordinate","text":"new godash . Coordinate ( x , y ) A zero-based tuple representing a single location on a Go board. Extends Immutable.Record . Constructor Arguments x (number) - Location on the X-axis. y (number) - Location on the Y-axis. Properties x (number) - Location on the X-axis. y (number) - Location on the Y-axis. Examples var tengen = new Coordinate ( 9 , 9 ); tengen . toString (); // => Coordinate { \"x\": 9, \"y\": 9 } tengen . x ; // => 9","title":"Coordinate"},{"location":"api/#constants","text":"","title":"Constants"},{"location":"api/#black","text":"godash . BLACK The color black.","title":"BLACK"},{"location":"api/#empty","text":"godash . EMPTY An empty space.","title":"EMPTY"},{"location":"api/#tengen_13","text":"godash . TENGEN_13 Center point on a 13x13 board.","title":"TENGEN_13"},{"location":"api/#tengen_19","text":"godash . TENGEN_19 Center point on a 19x19 board.","title":"TENGEN_19"},{"location":"api/#tengen_9","text":"godash . TENGEN_9 Center point on a 9x9 board.","title":"TENGEN_9"},{"location":"api/#white","text":"godash . WHITE The color white.","title":"WHITE"},{"location":"api/#board-utilities","text":"","title":"Board utilities"},{"location":"api/#addmove","text":"godash . addMove ( board , coordinates , color ) Function to add a move onto a board while respecting the rules. Since no sequence information is available, this function does not respect ko . Use followupKo if you want to do ko -related things. Arguments board (Board) - Board from which to add the move. coordinates (Coordinate) - Location to add the move. color (string) - Color of the move. Returns Board - New board with the move played. Examples var atari = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( atari ); // => +O+ // OXO // +++ var killed = addMove ( atari , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( killed ); // => +O+ // O+O // +O+","title":"addMove"},{"location":"api/#constructboard","text":"godash . constructBoard ( coordinates , board , startColor ) Constructs a board for an array of coordinates. This function iteratively calls addMove while alternating colors. Arguments coordinates (Array) - Ordered Coordinate moves. board (Board) - Optional starting board. Empty 19x19, if omitted. startColor (string) - Optional starting color, defaulted to BLACK . Returns Board - New board constructed from the coordinates. Examples var tigersMouth = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK ); toAsciiBoard ( tigersMouth ); // => +O+ // O+O // +++ var selfAtari = new Coordinate ( 1 , 1 ); var killingMove = new Coordinate ( 2 , 1 ); var ponnuki = constructBoard ( [ selfAtari , killingMove ], tigersMouth , WHITE ); toAsciiBoard ( ponnuki ); // => +O+ // O+O // +O+","title":"constructBoard"},{"location":"api/#difference","text":"godash . difference ( board1 , board2 ) Finds the moves on the first board that are not on the second board. Arguments board1 (Board) - First board. board2 (Board) - Board with moves to subtract from first board. Returns Set - Set containing pairs of Coordinate and color remaining in the difference. Examples var atari = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE , ); toAsciiBoard ( atari ); // => +O+ // OXO // +++ var captured = difference ( atari , addMove ( atari , new Coordinate ( 2 , 1 ), BLACK )); captured . toString (); // 'Set { List [ Coordinate { \"x\": 1, \"y\": 1 }, \"white\" ] }'","title":"difference"},{"location":"api/#followupko","text":"godash . followupKo ( board , coordinate , color ) Determines move that would be illegal under the ko rule Arguments board (Board) - Starting board. coordinate (Coordinate) - Intended placement of stone. color (string) - Stone color. Returns Coordinate - Position of illegal followup or null if none exists. Examples const koPosition = new Board ( 4 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE , new Coordinate ( 2 , 0 ), WHITE , new Coordinate ( 2 , 2 ), WHITE , new Coordinate ( 3 , 1 ), WHITE , ); toAsciiBoard ( koPosition ); // => +O++ // OXO+ // X+X+ // +X++ const koStart = new Coordinate ( 2 , 1 ); followupKo ( koPosition , koStart , BLACK ). toString (); // => 'Coordinate { \"x\": 1, \"y\": 1 }'","title":"followupKo"},{"location":"api/#group","text":"godash . group ( board , coordinate ) Finds the set of coordinates which identifies the fully connected group for the given location. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to inspect. Returns Set - Containing Coordinate for the members of the group. Examples var board = new Board ( 3 , new Coordinate ( 1 , 0 ), WHITE , new Coordinate ( 0 , 2 ), WHITE , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 2 , 2 ), BLACK , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( board ); // => ++X // X+O // +OO group ( board , new Coordinate ( 2 , 1 )). toString (); // => Set { // Coordinate { \"x\": 2, \"y\": 1 }, // Coordinate { \"x\": 2, \"y\": 2 }, // Coordinate { \"x\": 1, \"y\": 2 } // }","title":"group"},{"location":"api/#handicapboard","text":"godash . handicapBoard ( size , handicap ) Creates a new Board with the correct number of handicap stones placed. Only standard board sizes (9, 13, 19) are allowed. Arguments size (number) - Size of board, must be 9, 13, or 19. handicap (number) - Number of handicaps, must be 0-9. Returns Board - New board with handicaps placed. Examples var board = handicapBoard ( 9 , 4 ); toAsciiBoard ( board ); // => +++++++++ // +++++++++ // ++O+++O++ // +++++++++ // +++++++++ // +++++++++ // ++O+++O++ // +++++++++ // +++++++++","title":"handicapBoard"},{"location":"api/#islegalblackmove","text":"godash . isLegalBlackMove ( board , coordinate ) Partial application of isLegalMove , fixing the color to BLACK . Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to check. Returns boolean - Whether the move is legal. Examples","title":"isLegalBlackMove"},{"location":"api/#islegalmove","text":"godash . isLegalMove ( board , coordinate , color ) Determine whether the coordinate-color combination provided is a legal move for the board. Ko is not considered. Use followupKo if you want to do ko -related things. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to check. color (string) - Color to check - BLACK or WHITE . Returns boolean - Whether the move is legal. Examples var ponnuki = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( ponnuki ); // => +O+ // O+O // +O+ isLegalMove ( ponnuki , new Coordinate ( 1 , 1 ), BLACK ) // => true isLegalMove ( ponnuki , new Coordinate ( 1 , 1 ), WHITE ) // => false","title":"isLegalMove"},{"location":"api/#islegalwhitemove","text":"godash . isLegalWhiteMove ( board , coordinate ) Partial application of isLegalMove , fixing the color to WHITE . Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Location to check. Returns boolean - Whether the move is legal. Examples","title":"isLegalWhiteMove"},{"location":"api/#liberties","text":"godash . liberties ( board , coordinate ) Finds the set of all liberties for the given coordinate. If the coordinate is part of a group, the set of liberties are the liberties for that group. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Coordinate to inspect. Returns Set - Containing Coordinate members for the liberties of the passed coordinate. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), BLACK ); var collectedLiberties = liberties ( board , new Coordinate ( 1 , 1 )); Immutable . Set . of ( new Coordinate ( 1 , 0 ), new Coordinate ( 0 , 1 ), new Coordinate ( 1 , 2 ), new Coordinate ( 2 , 1 ) ). equals ( collectedLiberties ); // => true","title":"liberties"},{"location":"api/#libertycount","text":"godash . libertyCount ( board , coordinate ) Counts the liberties for the given coordinate. If the coordinate is part of a group, liberties for the entire group is counted. Arguments board (Board) - Board to inspect. coordinate (Coordinate) - Coordinate to inspect. Returns number - Count of liberties for the coordinate on the board. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), BLACK ); libertyCount ( board , new Coordinate ( 1 , 1 )) === 4 ; // => true","title":"libertyCount"},{"location":"api/#oppositecolor","text":"godash . oppositeColor ( color ) Toggles the passed color. Arguments color (string) - godash.BLACK or godash.WHITE Returns string - Color opposite of the one provided. Examples oppositeColor ( BLACK ) === WHITE // => true oppositeColor ( WHITE ) === BLACK // => true","title":"oppositeColor"},{"location":"api/#placestone","text":"godash . placeStone ( board , coordinate , color , force ) Places a stone on the board, ignoring the rules of Go. Arguments board (Board) - Board to add stone. coordinate (Coordinate) - Location to add stone. color (string) - Stone color - BLACK or WHITE . force (boolean) - Optionally allow placement over existing stones. Returns Board - New board with the move placed. Examples var ponnuki = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 2 , 1 ), BLACK ); toAsciiBoard ( ponnuki ); // => +O+ // O+O // +O+ toAsciiBoard ( placeStone ( ponnuki , new Coordinate ( 1 , 1 ), WHITE ) ); // => +O+ // OXO // +O+","title":"placeStone"},{"location":"api/#placestones","text":"godash . placeStones ( board , coordinates , color , force ) Places a set of stones onto the board, ignoring the rules of Go. Arguments board (Board) - Board to add stones. coordinates (Array) - Stones to place. color (string) - Stone color - BLACK or WHITE . force (boolean) - Optionally allow placement over existing stones. Returns Board - New board with the moves placed. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( board ); // => +++ // +X+ // +++ toAsciiBoard ( placeStones ( board , [ new Coordinate ( 1 , 0 ), new Coordinate ( 0 , 1 ), new Coordinate ( 1 , 2 ), new Coordinate ( 2 , 1 ) ], BLACK ) ); // => +O+ // OXO // +O+","title":"placeStones"},{"location":"api/#removestone","text":"godash . removeStone ( board , coordinate ) Make a given coordinate empty on the board. Arguments board (Board) - Board from which to remove the stone. coordinate (Coordinate) - Location of the stone. Returns Board - New board with the stone removed. Examples var board = new Board ( 3 , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( board ); // => +++ // +X+ // +++ toAsciiBoard ( removeStone ( board , new Coordinate ( 1 , 1 )) ); // => +++ // +++ // +++","title":"removeStone"},{"location":"api/#removestones","text":"godash . removeStones ( board , coordinates ) Makes several coordinates empty on the board. Arguments board (Board) - Board from which to remove the stone. coordinates (Coordinate) - Location of the stones. Returns Board - New board with the stones removed. Examples var board = new Board ( 3 , new Coordinate ( 1 , 0 ), WHITE , new Coordinate ( 1 , 1 ), WHITE , new Coordinate ( 1 , 2 ), BLACK ); toAsciiBoard ( board ); // => +++ // XXO // +++ toAsciiBoard ( removeStones ( board , [ new Coordinate ( 1 , 1 ), new Coordinate ( 1 , 2 ) ]) ); // => +++ // X++ // +++","title":"removeStones"},{"location":"api/#toasciiboard","text":"godash . toAsciiBoard ( board ) Constructs an ASCII representation of the board. Arguments board (Board) - Board to represent. Returns string - ASCII representation of the board. Examples var board = new Board ( 3 , new Coordinate ( 1 , 0 ), BLACK , new Coordinate ( 0 , 1 ), BLACK , new Coordinate ( 1 , 2 ), BLACK , new Coordinate ( 1 , 1 ), WHITE ); toAsciiBoard ( board ); // => +O+ // OXO // +++","title":"toAsciiBoard"},{"location":"api/#sgf-utilities","text":"","title":"SGF utilities"},{"location":"api/#coordinatetosgfpoint","text":"godash . coordinateToSgfPoint ( coordinate ) Converts a Coordinate to an SGF Point in the form of a Javascript String . Arguments coordinate (Coordinate) - Coordinate to convert. Returns string - 2-character string representing an SGF Point Examples coordinateToSgfPoint ( new Coordinate ( 0 , 0 )) // => \"aa\"","title":"coordinateToSgfPoint"},{"location":"api/#sgfpointtocoordinate","text":"godash . sgfPointToCoordinate ( sgfPoint ) Converts an SGF Point to a Coordinate . Arguments sgfPoint (string) - 2-character string representing an SGF Point Returns Coordinate - Corresponding Coordinate . Examples sgfPointToCoordinate ( 'hi' ). toString (); // => Coordinate { \"x\": 7, \"y\": 8 }","title":"sgfPointToCoordinate"},{"location":"api/#sgftojs","text":"godash . sgfToJS ( sgf ) Converts a raw SGF string into a plain Javascript array. Note that unlike Board , the results of this function is a mutable object. Arguments sgf (string) - Raw SGF string to be parsed. Returns Array - Unpacked SGF in plain Javascript objects. Examples var rawSgf = `( ;FF[4]GM[1]SZ[19];B[aa];W[bb] (;B[cc];W[dd];B[ad];W[bd]) (;B[hh];W[hg]C[what a move!]) (;B[gg];W[gh];B[hh] (;W[hg];B[kk]) (;W[kl]) ) )` ; sgfToJS ( rawSgf ); // => [ // {FF: '4', GM: '1', SZ: '19'}, {B: 'aa'}, {W: 'bb'}, // [ // [{B: 'cc'}, {W: 'dd'}, {B: 'ad'}, {W: 'bd'}], // [{B: 'hh'}, {W: 'hg', C: 'what a move!'}], // [ // {B: 'gg'}, {W: 'gh'}, {B: 'hh'}, // [ // [{W: 'hg'}, {B: 'kk'}], // [{W: 'kl'}] // ] // ] // ] // ];","title":"sgfToJS"}]}